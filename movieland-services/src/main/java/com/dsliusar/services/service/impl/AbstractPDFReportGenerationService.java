package com.dsliusar.services.service.impl;

import com.dsliusar.tools.annotations.ReportFieldNames;
import com.dsliusar.tools.entities.report.AllSiteMovies;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import java.io.FileOutputStream;
import java.lang.reflect.Field;
import java.time.LocalDateTime;

public class AbstractPDFReportGenerationService {

    private static Font mainHeaderFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
    private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
    private static Font centerBold = new Font(Font.FontFamily.TIMES_ROMAN, 28, Font.BOLD, BaseColor.RED);
    private static final String FONT = "resources/fonts/FreeSans.ttf";
    private static Font font = FontFactory.getFont(FONT, "Cp1250", BaseFont.EMBEDDED);

    private PdfPCell tableCell;
    private Paragraph preface;

    public void createPdfDocument(Class<?> inClass,
                                  java.util.List<AllSiteMovies> objectList,
                                  String fileName,
                                  String userName) {
        try {
            Document document = new Document(PageSize.A4);
            PdfWriter.getInstance(document, new FileOutputStream(fileName));

            document.open();
            addTitlePage(document, "Movie Land Report", userName);

            document.setPageSize(PageSize.A1.rotate());
            document.newPage();
            PdfPTable table = createTableWithHeaders(inClass);
            document.add(fillTableWithData(table, objectList, document));
            document.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private PdfPTable fillTableWithData(PdfPTable table, java.util.List<AllSiteMovies> allSiteMovies, Document document) {
        table.setHeaderRows(allSiteMovies.size());

        for (AllSiteMovies siteMovies : allSiteMovies) {
            table.addCell(siteMovies.getMovieId().toString());
            table.addCell(siteMovies.getMovieNameOrigin());
            table.addCell(new Phrase(siteMovies.getMovieNameRus(),font));
            table.addCell(new Phrase(siteMovies.getDescription(),font));
            table.addCell(new Phrase(siteMovies.getGenres(),font));
            table.addCell(siteMovies.getPrice().toString());
            table.addCell(siteMovies.getAddDate().toString());
            table.addCell(siteMovies.getModifiedDate().toString());
            table.addCell(siteMovies.getRating().toString());
            table.addCell(siteMovies.getReviewCount().toString());
            }
        return table;
    }

    private void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }

    private PdfPTable createTableWithHeaders(Class<?> inClass) {
        Field[] fields = inClass.getDeclaredFields();
        //create table with counts of fields
        PdfPTable table = new PdfPTable(inClass.getDeclaredFields().length);
        table.setWidthPercentage(100);

        for (Field field : fields) {
            field.setAccessible(true);
            if (field.isAnnotationPresent(ReportFieldNames.class)) {
                String fieldName = field.getAnnotation(ReportFieldNames.class).fieldName();
                tableCell = new PdfPCell(new Phrase(fieldName));
                table.addCell(tableCell);
            }
        }
        return table;
    }

    private void addTitlePage(Document document, String reportName, String userName) throws DocumentException {
        preface = new Paragraph();

        addEmptyLine(preface, 1);
        preface.add(new Paragraph("Report Name : " + reportName, mainHeaderFont));
        preface.setAlignment(Element.ALIGN_CENTER);
        addEmptyLine(preface, 3);
        document.add(preface);

        preface = new Paragraph();
        preface.add(new Paragraph("Report generated by: " + userName, smallBold));
        preface.setAlignment(Element.ALIGN_LEFT);
        addEmptyLine(preface, 2);
        document.add(preface);

        preface = new Paragraph();
        preface.add(new Paragraph("Generation Time " + LocalDateTime.now(), smallBold));
        preface.setAlignment(Element.ALIGN_LEFT);
        addEmptyLine(preface, 12);
        document.add(preface);

        preface = new Paragraph();
        preface.add(new Paragraph("MOVIE LAND PDF", centerBold));
        preface.setAlignment(Element.ALIGN_CENTER);
        addEmptyLine(preface, 24);
        document.add(preface);

        preface = new Paragraph();
        preface.add(new Paragraph("for internal use only", smallBold));
        preface.setAlignment(Element.ALIGN_CENTER);
        document.add(preface);
    }
}
